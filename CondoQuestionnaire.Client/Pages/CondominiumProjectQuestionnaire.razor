@page "/questionnaire"
@using CondoQuestionnaire.Client.Models
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService


<Wizard Id="ProjectQuestionnaireWizard">
    @foreach(var page in condoBuildingQuestionProvider.Groups){
        <WizardStep Name=@(page.Label)>
            <div id=@String.Format(page.Label)>
                <MudGrid>
                    <MudListItem Class="dark-blue-header">
                        @(page.Label)
                    </MudListItem>
                    @foreach(var question in page.Questions){
                        <MudListItem>
                            @{
                                switch (question.Type.Value)
                                {
                                    case "String":
                                    case "Address":
                                        <StringQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />
                                        break;
                                    case "Text":
                                        <TextQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />
                                        break;
                                    case "Date":
                                        <DateQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />
                                        break;
                                    case "Email":
                                        <EmailQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />
                                        break;
                                    case "Number":
                                        <NumberQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />
                                        break;
                                    case "YearOnly":
                                        <DateOnlyQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />

                                        break;
                                    case "Percentage":

                                        var inputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer();
                                        if (condoQuestionnaireApplication.Answers.Any(x=>x.QuestionCode == question.Code))
                                        {
                                            inputCondoQuestionnaireAnswer = condoQuestionnaireApplication.Answers.FirstOrDefault(x => x.QuestionCode == question.Code);
                                        }
                                        else{
                                            inputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer()
                                            {
                                                QuestionCode = question.Code,
                                                QuestionType = question.Type,
                                            };
                                            condoQuestionnaireApplication.Answers.Add(inputCondoQuestionnaireAnswer);
                                        }

                                        <MudNumericField HideSpinButtons="true" Variant="Variant.Text" Min="0" Max="100" Converter="@StringConverter"
                                         @bind-Value=@(condoQuestionnaireApplication.Answers.First(x => x.QuestionCode == question.Code).Data) />
                                        break;
                                    case "PhoneNumber":
                                        <NumberQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />
                                        break;
                                    case "Money":
                                        if (condoQuestionnaireApplication.Answers.Any(x=>x.QuestionCode == question.Code))
                                        {
                                            inputCondoQuestionnaireAnswer = condoQuestionnaireApplication.Answers.FirstOrDefault(x => x.QuestionCode == question.Code);
                                        }
                                        else{
                                            inputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer()
                                            {
                                                QuestionCode = question.Code,
                                                QuestionType = question.Type,
                                            };
                                            condoQuestionnaireApplication.Answers.Add(inputCondoQuestionnaireAnswer);
                                        }
                                        <MudNumericField HideSpinButtons="true" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                      @bind-Value=@(condoQuestionnaireApplication.Answers.First(x => x.QuestionCode == question.Code).Data) Converter="@StringConverter"/>
                                        break;
                                    case "Boolean":
                                        <BooleanQuestion answerList=@condoQuestionnaireApplication.Answers question=@question />

                                        break;
                                    case "MultiSelect":
                                        @foreach (var subQuestion in question.SubQuestions)
                                        {
                                            var subInputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer();
                                            if (condoQuestionnaireApplication.Answers.Any(x => x.QuestionCode == subQuestion.Code))
                                            {
                                                subInputCondoQuestionnaireAnswer = condoQuestionnaireApplication.Answers.FirstOrDefault(x => x.QuestionCode == question.Code);
                                            }
                                            else
                                            {
                                                subInputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer()
                                            {
                                                QuestionCode = subQuestion.Code,
                                                QuestionType = subQuestion.Type,
                                            };
                                                condoQuestionnaireApplication.Answers.Add(subInputCondoQuestionnaireAnswer);
                                            }
                                            
                                            <MudCheckBox Label=@(subQuestion.Label) Converter="BooleanConverter"
                                     @bind-Checked="@(condoQuestionnaireApplication.Answers.First(x => x.QuestionCode == subQuestion.Code).Data)" />
                                        }
                                        break;
                                    case "BooleanWithDateOption":
                                        @foreach (var subQuestion in question.SubQuestions)
                                        {
                                            var subInputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer();
                                            if (condoQuestionnaireApplication.Answers.Any(x => x.QuestionCode == subQuestion.Code))
                                            {
                                                subInputCondoQuestionnaireAnswer = condoQuestionnaireApplication.Answers.FirstOrDefault(x => x.QuestionCode == question.Code);
                                            }
                                            else
                                            {
                                                subInputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer()
                                            {
                                                QuestionCode = subQuestion.Code,
                                                QuestionType = subQuestion.Type,
                                            };
                                                condoQuestionnaireApplication.Answers.Add(subInputCondoQuestionnaireAnswer);
                                            }
                                            
                                            var subLabel = String.Format("{0}_{1}_{2}", page.Label.Replace(" ", ""), question.Label.Replace(" ", ""), subQuestion.Label.Replace(" ", ""));
                                            var subValue = subQuestion.Code.Split(':').Last();

                                            <input type="radio" id=@subLabel name=@subLabel value=@(subValue)>
                                            <label for=@(subValue)>@(subValue)</label>

                                            <br>
                                            <DateQuestion question=@subQuestion answerList=@condoQuestionnaireApplication.Answers />
                                        }

                                        break;
                                    case "Selection":
                                        <LabelOnlyQuestion questionLabel=@question.Label />
                                        @foreach (var subQuestion in question.SubQuestions)
                                        {
                                            var subInputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer();
                                            if (condoQuestionnaireApplication.Answers.Any(x => x.QuestionCode == subQuestion.Code))
                                            {
                                                subInputCondoQuestionnaireAnswer = condoQuestionnaireApplication.Answers.FirstOrDefault(x => x.QuestionCode == question.Code);
                                            }
                                            else
                                            {
                                                subInputCondoQuestionnaireAnswer = new CondoQuestionnaireAnswer()
                                            {
                                                QuestionCode = subQuestion.Code,
                                                QuestionType = subQuestion.Type,
                                            };
                                                condoQuestionnaireApplication.Answers.Add(subInputCondoQuestionnaireAnswer);
                                            }

                                            var subInputValue = subInputCondoQuestionnaireAnswer.Data;
                                            var subLabel = String.Format("{0}_{1}_{2}", page.Label.Replace(" ", ""), question.Label.Replace(" ", ""), subQuestion.Label.Replace(" ", ""));

                                            <input type="radio" id=@(subLabel) name=@(subLabel) value=@(subQuestion.Label)>
                                            <label for=@(subLabel)>@(subQuestion.Label)</label>

                                            <br>

                                        }
                                        break;
                                    case "Table":
                                        <TableQuestion question=@(question as ITableQuestion) answerList=@condoQuestionnaireApplication.Answers />
                                        break;
                                }
                            }
                        </MudListItem>
                    }
                </MudGrid>
            </div>
            @if (condoBuildingQuestionProvider.Groups.Last().Code == page.Code )
            {
                <MudButton Variant="Variant.Filled" Class="dark-blue-header" OnClick="@(()=>Submit())">Submit</MudButton>
            }
        
        </WizardStep>
    }
</Wizard>

@code {

    Questionnaire Questionnaire = new Questionnaire();

    CondoBuildingQuestionProvider condoBuildingQuestionProvider = new CondoBuildingQuestionProvider();

    CondoQuestionnaireApplication condoQuestionnaireApplication = new CondoQuestionnaireApplication();

    private string _currentState;

    void OnChange(string value, string name)
    {
        _currentState = String.Format($"{name} value changed to {value}");
        this.StateHasChanged();
    }

    void OnChange(string value)
    {
        _currentState = String.Format($"value changed to {value}");
        this.StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        condoQuestionnaireApplication = UserService.CondoQuestionnaireApplication;
    }

    void Submit()
    {
        UserService.Submit();
    }


    Converter<object> StringConverter = new Converter<object>
    {
        SetFunc = value => value.ToString(),
        GetFunc = text => (object)text,
    };

    MudBlazor.Converter<object, DateTime?> DateConverter = new MudBlazor.Converter<object, DateTime?>
    {
        SetFunc = value => Convert.ToDateTime(value),
        GetFunc = text => (object)text,
    };

    MudBlazor.Converter<object, bool?> BooleanConverter = new MudBlazor.Converter<object, bool?>
        {
            SetFunc = value => value.ToString() == "true",
            GetFunc = text => (object)text,
        };
}